// 클래스 이름 잘 짓는 게 쉽지 않다.
// 그냥 menu 보다는 total_menu 처럼 구체적으로 짓는 게 좋다.
// 언더바가 가독성이 더 좋아서 쓰긴 함.
// 클래스명 복붙하는 게 귀찮지만 하다보면 그래야 시간이 단축되긴 하다. 자잘한 오타가 생길 수 없다. 동작이 안될 때 이름을 붙여보는 것도 좋다. 이름이 헷갈릴 때는 화면 분할.
// scss 할 때 오류가 있으면 css 파일로 변환 자체를 해주지 않는다.
// 크롬 검사기능 활용할 것.

.container {
  flex-wrap: wrap;
  // 모자랐을 때 공간을 줄이는 게 아니라 상자 크기를 유지하면서 넘기는 것.
  display: flex;
  // flex 모드가 되어야 아래 것들이 다 적용된다.
  gap: 10px;
  // gap 하면 사이 간격이 생긴다. flex 를 써야 gap 을 사용할 수 있다.
  //   justify-content: center;
  //   justify-content: space-between;
  // 스페이스 비트윈은 좌우로 늘리고 가운데 있는 것들은 간격을 일정하게 분배하는 것
  // start center end 란 이름으로 왼쪽, 가운데, 오른쪽 정렬이 된다.
  // 수평으로 가운데
  align-items: center;
  // align-content 라는 것과 헷갈릴 수 있다. 이것만 기억하면 됨.
  // 마진 0 오토는 안되는 경우도 이을 수 있음.
  // 수직으로 가운데
  // 부모가 되는 태그에 플렉스를 주면 자식 요소가 가로 정렬이 된다. 감싸고 있는 것에다가 써야 함.
  width: 500px;
  height: 500px;
  border: 1px solid red;
}

.box1 {
  width: 100px;
  //   width: 50%;
  // 플렉스 안 준 것은 고정된다.
  // 안의 요소에 flex 비율을 적요해서 공간 차지하는 비율 적용 가능하다.
  // 하나를 고정하고 남은 공간을 다 체우게 하는 데 잘 쓰임 width 와 함께 쓰지는 않는다. 지양.
  height: 100px;
  background-color: red;
  border: 5px solid green;
  box-sizing: border-box;
  // 상자에는 boder box 써야 안쪽으로 보더가 들어간다. 그럼 안쪽 공간이 생기지만, 플렉스를 쓰면 대충 우겨서 넣어준다.
}
.box2 {
  width: 100px;
  //   flex: 1;
  // 인라인 블록으로 가로 정렬을 하면 오류가 많이 생김
  //   width: 100px;
  // 50% 으로 한줄에 두개 채우려고 해도 그게 안됨. 그 사이 간격이 생겨서, 깨지게 된다.
  // 인라인 블록이 되면 박스를 문자 개념으로 보게 된다. 문자 사이의 자간이 있는 것처럼. 그래서 컴퓨터가 띄어 놓은 것. 없애려면 font-size 0을 주거나, 반반 나눌 때 띄어질 것을 계산해야 하는..
  height: 100px;
  background-color: blue;
  border: 5px solid green;
  box-sizing: border-box;
}
